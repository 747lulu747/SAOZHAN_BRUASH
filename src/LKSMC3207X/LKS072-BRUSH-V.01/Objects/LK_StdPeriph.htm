<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\LK_StdPeriph.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\LK_StdPeriph.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Sun Apr 07 20:54:31 2024
<BR><P>
<H3>Maximum Stack Usage =        248 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Hardware_init &rArr; MCPWM_init &rArr; MCPWM_StructInit
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[43]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[7]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[1e]">CAN0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">CAN0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[19]">ADC0_IRQHandler</a> from interrupt.o(i.ADC0_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[1a]">ADC1_IRQHandler</a> from interrupt.o(i.ADC1_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[1e]">CAN0_IRQHandler</a> from startup_lks32mc07x.o(.text) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[23]">CL0_IRQHandler</a> from interrupt.o(i.CL0_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[18]">CMP_IRQHandler</a> from interrupt.o(i.CMP_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[1d]">DMA0_IRQHandler</a> from startup_lks32mc07x.o(.text) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[17]">DSP0_IRQHandler</a> from interrupt.o(i.DSP0_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[13]">GPIO_IRQHandler</a> from interrupt.o(i.GPIO_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[14]">HALL0_IRQHandler</a> from interrupt.o(i.HALL0_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from startup_lks32mc07x.o(.text) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[11]">I2C0_IRQHandler</a> from interrupt.o(i.I2C0_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[1b]">MCPWM0_IRQHandler</a> from interrupt.o(i.MCPWM0_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[1c]">MCPWM1_IRQHandler</a> from interrupt.o(i.MCPWM1_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_lks32mc07x.o(.text) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[22]">PWRDN_IRQHandler</a> from interrupt.o(i.PWRDN_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_lks32mc07x.o(.text) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[f]">QEP0_IRQHandler</a> from interrupt.o(i.QEP0_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[10]">QEP1_IRQHandler</a> from interrupt.o(i.QEP1_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_lks32mc07x.o(.text) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[1f]">SIF0_IRQHandler</a> from interrupt.o(i.SIF0_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[12]">SPI0_IRQHandler</a> from interrupt.o(i.SPI0_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_lks32mc07x.o(.text) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[21]">SW_IRQHandler</a> from interrupt.o(i.SW_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from interrupt.o(i.SysTick_Handler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[24]">SystemInit</a> from hardware_init.o(i.SystemInit) referenced from startup_lks32mc07x.o(.text)
 <LI><a href="#[b]">TIMER0_IRQHandler</a> from interrupt.o(i.TIMER0_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[c]">TIMER1_IRQHandler</a> from interrupt.o(i.TIMER1_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[d]">TIMER2_IRQHandler</a> from interrupt.o(i.TIMER2_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[e]">TIMER3_IRQHandler</a> from interrupt.o(i.TIMER3_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[15]">UART0_IRQHandler</a> from interrupt.o(i.UART0_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[16]">UART1_IRQHandler</a> from interrupt.o(i.UART1_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[20]">WAKE_IRQHandler</a> from interrupt.o(i.WAKE_IRQHandler) referenced from startup_lks32mc07x.o(RESET)
 <LI><a href="#[26]">__main</a> from __main.o(!!!main) referenced from startup_lks32mc07x.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[26]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[27]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[29]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[9a]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[9b]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[9c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[9d]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))

<P><STRONG><a name="[9e]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[9f]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[a0]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[a1]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[a2]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[a3]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[a4]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[a5]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[a7]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[ae]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[af]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[32]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[b1]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[b2]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[b3]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[b4]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[b5]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[b6]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[28]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[b7]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[b8]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[2e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Hardware_init &rArr; MCPWM_init &rArr; MCPWM_StructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[b9]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[45]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[31]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[ba]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[33]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_lks32mc07x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lks32mc07x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lks32mc07x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lks32mc07x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lks32mc07x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc07x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lks32mc07x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lks32mc07x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[36]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[35]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[37]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[bb]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_StructInit
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>__aeabi_uidivmod</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>__aeabi_idivmod</STRONG> (Thumb, 460 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_init
</UL>

<P><STRONG><a name="[c0]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 88 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_init
</UL>

<P><STRONG><a name="[3a]"></a>_ddiv</STRONG> (Thumb, 1076 bytes, Stack size 88 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[39]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_init
</UL>

<P><STRONG><a name="[c3]"></a>_dfix</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, dfixi.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[3b]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_vb_pullback_proc
</UL>

<P><STRONG><a name="[c4]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>

<P><STRONG><a name="[c5]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_init
</UL>

<P><STRONG><a name="[c6]"></a>_dmul</STRONG> (Thumb, 578 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_init
</UL>

<P><STRONG><a name="[c7]"></a>_f2d</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[3f]"></a>__fpl_cmpreturn</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[40]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[2b]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[30]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[41]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[c8]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c9]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[ca]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>Read_Trim</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lks32mc08x_nvr.o(.text.Read_Trim))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[96]"></a>pi_controller_reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pi_controller.o(PlaceInRAM))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_vb_pullback_proc
</UL>

<P><STRONG><a name="[49]"></a>pi_controller</STRONG> (Thumb, 154 bytes, Stack size 12 bytes, pi_controller.o(PlaceInRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pi_controller
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_vb_pullback_proc
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_speed_loop
</UL>

<P><STRONG><a name="[cf]"></a>ser_pi_controller</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, pi_controller.o(PlaceInRAM), UNUSED)

<P><STRONG><a name="[d0]"></a>ser_anti_intergral_pi_controller</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, pi_controller.o(PlaceInRAM), UNUSED)

<P><STRONG><a name="[46]"></a>pll</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, pll.o(PlaceInRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pll &rArr; DSP0_sin
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP0_sin
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP0_cos
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pi_controller
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_isr
</UL>

<P><STRONG><a name="[19]"></a>ADC0_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, interrupt.o(i.ADC0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC0_IRQHandler &rArr; ADC_GetIRQFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetIRQFlag
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearIRQFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ADC1_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, interrupt.o(i.ADC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC1_IRQHandler &rArr; ADC_GetIRQFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetIRQFlag
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearIRQFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>ADC_CHN_GAIN_CFG</STRONG> (Thumb, 58 bytes, Stack size 36 bytes, lks32mc07x_adc.o(i.ADC_CHN_GAIN_CFG))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ADC_CHN_GAIN_CFG
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
</UL>

<P><STRONG><a name="[4b]"></a>ADC_ClearIRQFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lks32mc07x_adc.o(i.ADC_ClearIRQFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>

<P><STRONG><a name="[85]"></a>ADC_GetConversionValue</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, lks32mc07x_adc.o(i.ADC_GetConversionValue))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_isr
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_vb_lh_adc_offset_proc
</UL>

<P><STRONG><a name="[4a]"></a>ADC_GetIRQFlag</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lks32mc07x_adc.o(i.ADC_GetIRQFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_GetIRQFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
</UL>

<P><STRONG><a name="[4c]"></a>ADC_Init</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, lks32mc07x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_AnalogModuleClockCmd
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Trim
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
</UL>

<P><STRONG><a name="[50]"></a>ADC_StructInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lks32mc07x_adc.o(i.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
</UL>

<P><STRONG><a name="[4f]"></a>ADC_init</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, hardware_init.o(i.ADC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ADC_init &rArr; ADC_CHN_GAIN_CFG
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CHN_GAIN_CFG
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[23]"></a>CL0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.CL0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>CMP_IRQHandler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, interrupt.o(i.CMP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CMP_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>Clock_Init</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hardware_init.o(i.Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Clock_Init &rArr; SoftDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[17]"></a>DSP0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.DSP0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DSP0_cos</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lks32mc07x_dsp.o(i.DSP0_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DSP0_cos
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SoftResetModule
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trig_Functions
</UL>

<P><STRONG><a name="[56]"></a>DSP0_div</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lks32mc07x_dsp.o(i.DSP0_div))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DSP0_div
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SoftResetModule
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_theta
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_vb_set_base_proc
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_vb_pullback_proc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_vb_m_theta_align_proc
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_speed_loop
</UL>

<P><STRONG><a name="[47]"></a>DSP0_sin</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lks32mc07x_dsp.o(i.DSP0_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DSP0_sin
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_SoftResetModule
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trig_Functions
</UL>

<P><STRONG><a name="[57]"></a>DSP_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lks32mc07x_dsp.o(i.DSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DSP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[13]"></a>GPIO_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.GPIO_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>GPIO_Init</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, lks32mc07x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[5a]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 258 bytes, Stack size 12 bytes, lks32mc07x_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
</UL>

<P><STRONG><a name="[74]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lks32mc07x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[68]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lks32mc07x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM0_IRQHandler
</UL>

<P><STRONG><a name="[65]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lks32mc07x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM0_IRQHandler
</UL>

<P><STRONG><a name="[5d]"></a>GPIO_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lks32mc07x_gpio.o(i.GPIO_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_init
</UL>

<P><STRONG><a name="[5c]"></a>GPIO_init</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, hardware_init.o(i.GPIO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPIO_init &rArr; GPIO_PinAFConfig &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[14]"></a>HALL0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, interrupt.o(i.HALL0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>Hardware_init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, hardware_init.o(i.Hardware_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Hardware_init &rArr; MCPWM_init &rArr; MCPWM_StructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_DISABLE
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftDelay
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11]"></a>I2C0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.I2C0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>IWDG_DISABLE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lks32mc07x_sys.o(i.IWDG_DISABLE))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[95]"></a>LPFFunction</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, foc_util.o(i.LPFFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPFFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_vb_lh_adc_offset_proc
</UL>

<P><STRONG><a name="[94]"></a>LPFFunction_HR_2</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, foc_util.o(i.LPFFunction_HR_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LPFFunction_HR_2
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_vb_pullback_proc
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_speed_loop
</UL>

<P><STRONG><a name="[1b]"></a>MCPWM0_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, interrupt.o(i.MCPWM0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MCPWM0_IRQHandler &rArr; foc_core_isr &rArr; pll &rArr; DSP0_sin
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_isr
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_GetIRQFlag
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_ClearIRQFlag
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>MCPWM1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.MCPWM1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>MCPWM_ClearIRQFlag</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lks32mc07x_mcpwm.o(i.MCPWM_ClearIRQFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM0_IRQHandler
</UL>

<P><STRONG><a name="[64]"></a>MCPWM_GetIRQFlag</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, lks32mc07x_mcpwm.o(i.MCPWM_GetIRQFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCPWM_GetIRQFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM0_IRQHandler
</UL>

<P><STRONG><a name="[69]"></a>MCPWM_Init</STRONG> (Thumb, 1472 bytes, Stack size 8 bytes, lks32mc07x_mcpwm.o(i.MCPWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCPWM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ModuleClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_init
</UL>

<P><STRONG><a name="[6a]"></a>MCPWM_StructInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lks32mc07x_mcpwm.o(i.MCPWM_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCPWM_StructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_init
</UL>

<P><STRONG><a name="[60]"></a>MCPWM_init</STRONG> (Thumb, 464 bytes, Stack size 232 bytes, hardware_init.o(i.MCPWM_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = MCPWM_init &rArr; MCPWM_StructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_StructInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[52]"></a>PWMOutputs</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, lks32mc07x_mcpwm.o(i.PWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_set_open_drive_mode
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_isr
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP_IRQHandler
</UL>

<P><STRONG><a name="[22]"></a>PWRDN_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.PWRDN_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>QEP0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.QEP0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>QEP1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.QEP1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SIF0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.SIF0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SPI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.SPI0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SW_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.SW_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SYS_AnalogModuleClockCmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lks32mc07x_sys.o(i.SYS_AnalogModuleClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[58]"></a>SYS_ModuleClockCmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lks32mc07x_sys.o(i.SYS_ModuleClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP_Init
</UL>

<P><STRONG><a name="[55]"></a>SYS_SoftResetModule</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lks32mc07x_sys.o(i.SYS_SoftResetModule))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP0_sin
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP0_div
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP0_cos
</UL>

<P><STRONG><a name="[54]"></a>SoftDelay</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hardware_init.o(i.SoftDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SoftDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[6c]"></a>Software_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(i.Software_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Software_init &rArr; foc_core_init &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, interrupt.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Handler &rArr; user_1ms_call &rArr; app_cali_demon_loop &rArr; open_drive_test &rArr; foc_core_set_open_drive_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_1ms_call
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, hardware_init.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; Clock_Init &rArr; SoftDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>Systick_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hardware_init.o(i.Systick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Systick_init &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[b]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, interrupt.o(i.TIMER0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.TIMER1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.TIMER2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.TIMER3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>Trig_Functions</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, foc_util.o(i.Trig_Functions))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Trig_Functions &rArr; DSP0_sin
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP0_sin
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP0_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_isr
</UL>

<P><STRONG><a name="[15]"></a>UART0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.UART0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.UART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>Udq_2_Uab</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, foc.o(i.Udq_2_Uab))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Udq_2_Uab
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_isr
</UL>

<P><STRONG><a name="[20]"></a>WAKE_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.WAKE_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lks32mc07x.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, app.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_isr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_svm_gen
</UL>

<P><STRONG><a name="[71]"></a>app_cali_demon_loop</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app.o(i.app_cali_demon_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_cali_demon_loop &rArr; open_drive_test &rArr; foc_core_set_open_drive_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_drive_test
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_1ms_call
</UL>

<P><STRONG><a name="[6e]"></a>app_init</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, app.o(i.app_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = app_init &rArr; app_set_sv_config &rArr; foc_core_set_zero_m_theta_align &rArr; m_theta_to_e_theta &rArr; mode_theta &rArr; DSP0_div
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_sv_config
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Software_init
</UL>

<P><STRONG><a name="[73]"></a>app_set_sv_config</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, app.o(i.app_set_sv_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_set_sv_config &rArr; foc_core_set_zero_m_theta_align &rArr; m_theta_to_e_theta &rArr; mode_theta &rArr; DSP0_div
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_set_zero_m_theta_align
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_set_swing_base_m_theta
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_set_max_overload
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_set_max_abc_current
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_set_lh_adc_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_init
</UL>

<P><STRONG><a name="[91]"></a>butter_bandpass_220</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, foc_util.o(i.butter_bandpass_220))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = butter_bandpass_220
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_speed_loop
</UL>

<P><STRONG><a name="[80]"></a>butter_bandpass_220_reset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, foc_util.o(i.butter_bandpass_220_reset))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_init
</UL>

<P><STRONG><a name="[82]"></a>butter_bandpass_550_reset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, foc_util.o(i.butter_bandpass_550_reset))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_init
</UL>

<P><STRONG><a name="[6d]"></a>foc_core_init</STRONG> (Thumb, 358 bytes, Stack size 64 bytes, foc.o(i.foc_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = foc_core_init &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notch_filter_550_reset
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notch_filter_220_reset
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;butter_bandpass_550_reset
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;butter_bandpass_220_reset
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_theta_to_e_theta
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_svm_gen
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Software_init
</UL>

<P><STRONG><a name="[66]"></a>foc_core_isr</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, foc.o(i.foc_core_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = foc_core_isr &rArr; pll &rArr; DSP0_sin
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputs
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_theta
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trig_Functions
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_work_proc
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_vibration_proc
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_vb_set_base_proc
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_vb_pullback_proc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_vb_m_theta_align_proc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_vb_lh_adc_offset_proc
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_dirve_proc
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_svm_gen
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Udq_2_Uab
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCPWM0_IRQHandler
</UL>

<P><STRONG><a name="[75]"></a>foc_core_set_lh_adc_offset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, foc.o(i.foc_core_set_lh_adc_offset))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_sv_config
</UL>

<P><STRONG><a name="[79]"></a>foc_core_set_max_abc_current</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, foc.o(i.foc_core_set_max_abc_current))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_sv_config
</UL>

<P><STRONG><a name="[78]"></a>foc_core_set_max_overload</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, foc.o(i.foc_core_set_max_overload))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = foc_core_set_max_overload
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_sv_config
</UL>

<P><STRONG><a name="[8f]"></a>foc_core_set_open_drive_mode</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, foc.o(i.foc_core_set_open_drive_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = foc_core_set_open_drive_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMOutputs
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_drive_test
</UL>

<P><STRONG><a name="[77]"></a>foc_core_set_swing_base_m_theta</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, foc.o(i.foc_core_set_swing_base_m_theta))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = foc_core_set_swing_base_m_theta &rArr; m_theta_to_e_theta &rArr; mode_theta &rArr; DSP0_div
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_theta_to_e_theta
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_sv_config
</UL>

<P><STRONG><a name="[76]"></a>foc_core_set_zero_m_theta_align</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, foc.o(i.foc_core_set_zero_m_theta_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = foc_core_set_zero_m_theta_align &rArr; m_theta_to_e_theta &rArr; mode_theta &rArr; DSP0_div
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_theta
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_theta_to_e_theta
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_set_sv_config
</UL>

<P><STRONG><a name="[84]"></a>foc_core_svm_gen</STRONG> (Thumb, 478 bytes, Stack size 16 bytes, foc.o(i.foc_core_svm_gen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = foc_core_svm_gen &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_isr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_init
</UL>

<P><STRONG><a name="[7a]"></a>m_theta_to_e_theta</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, foc.o(i.m_theta_to_e_theta))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = m_theta_to_e_theta &rArr; mode_theta &rArr; DSP0_div
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_theta
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_set_zero_m_theta_align
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_set_swing_base_m_theta
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_vb_set_base_proc
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_vb_pullback_proc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_vb_m_theta_align_proc
</UL>

<P><STRONG><a name="[2f]"></a>main</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = main &rArr; Hardware_init &rArr; MCPWM_init &rArr; MCPWM_StructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Software_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[86]"></a>mode_theta</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, foc_util.o(i.mode_theta))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mode_theta &rArr; DSP0_div
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP0_div
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_set_zero_m_theta_align
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_isr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_work_proc
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_vibration_proc
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_vb_set_base_proc
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_vb_pullback_proc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_vb_m_theta_align_proc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_vb_lh_adc_offset_proc
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_speed_loop
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_theta_to_e_theta
</UL>

<P><STRONG><a name="[92]"></a>notch_filter_220</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, foc_util.o(i.notch_filter_220))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = notch_filter_220
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_speed_loop
</UL>

<P><STRONG><a name="[81]"></a>notch_filter_220_reset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, foc_util.o(i.notch_filter_220_reset))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_init
</UL>

<P><STRONG><a name="[83]"></a>notch_filter_550_reset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, foc_util.o(i.notch_filter_550_reset))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_init
</UL>

<P><STRONG><a name="[87]"></a>open_dirve_proc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, foc.o(i.open_dirve_proc))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_isr
</UL>

<P><STRONG><a name="[72]"></a>open_drive_test</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, app.o(i.open_drive_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = open_drive_test &rArr; foc_core_set_open_drive_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_set_open_drive_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_cali_demon_loop
</UL>

<P><STRONG><a name="[90]"></a>pos_speed_loop</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, foc.o(i.pos_speed_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pos_speed_loop &rArr; mode_theta &rArr; DSP0_div
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP0_div
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theta_distance
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pi_controller
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notch_filter_220
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_theta
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;butter_bandpass_220
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPFFunction_HR_2
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_work_proc
</UL>

<P><STRONG><a name="[88]"></a>sw_vb_lh_adc_offset_proc</STRONG> (Thumb, 324 bytes, Stack size 8 bytes, foc.o(i.sw_vb_lh_adc_offset_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sw_vb_lh_adc_offset_proc &rArr; mode_theta &rArr; DSP0_div
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_theta
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPFFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_isr
</UL>

<P><STRONG><a name="[89]"></a>sw_vb_m_theta_align_proc</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, foc.o(i.sw_vb_m_theta_align_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sw_vb_m_theta_align_proc &rArr; m_theta_to_e_theta &rArr; mode_theta &rArr; DSP0_div
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP0_div
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_theta
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_theta_to_e_theta
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_isr
</UL>

<P><STRONG><a name="[8a]"></a>sw_vb_pullback_proc</STRONG> (Thumb, 846 bytes, Stack size 16 bytes, foc.o(i.sw_vb_pullback_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sw_vb_pullback_proc &rArr; m_theta_to_e_theta &rArr; mode_theta &rArr; DSP0_div
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP0_div
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theta_distance
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pi_controller_reset
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pi_controller
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_theta
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPFFunction_HR_2
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_theta_to_e_theta
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16_abs
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_isr
</UL>

<P><STRONG><a name="[8b]"></a>sw_vb_set_base_proc</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, foc.o(i.sw_vb_set_base_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sw_vb_set_base_proc &rArr; m_theta_to_e_theta &rArr; mode_theta &rArr; DSP0_div
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DSP0_div
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_theta
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_theta_to_e_theta
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_isr
</UL>

<P><STRONG><a name="[8d]"></a>sw_vibration_proc</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, foc.o(i.sw_vibration_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sw_vibration_proc &rArr; mode_theta &rArr; DSP0_div
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_theta
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_isr
</UL>

<P><STRONG><a name="[8c]"></a>sw_work_proc</STRONG> (Thumb, 588 bytes, Stack size 8 bytes, foc.o(i.sw_work_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sw_work_proc &rArr; pos_speed_loop &rArr; mode_theta &rArr; DSP0_div
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_theta
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_speed_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;foc_core_isr
</UL>

<P><STRONG><a name="[93]"></a>theta_distance</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, foc_util.o(i.theta_distance))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_vb_pullback_proc
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_speed_loop
</UL>

<P><STRONG><a name="[6f]"></a>user_1ms_call</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i.user_1ms_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = user_1ms_call &rArr; app_cali_demon_loop &rArr; open_drive_test &rArr; foc_core_set_open_drive_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_cali_demon_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_vb_pullback_proc
</UL>

<P><STRONG><a name="[99]"></a>_drcmple</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[63]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hardware_init.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[62]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, hardware_init.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Systick_init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hardware_init
</UL>

<P><STRONG><a name="[97]"></a>u16_abs</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, foc.o(i.u16_abs))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_vb_pullback_proc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[44]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>

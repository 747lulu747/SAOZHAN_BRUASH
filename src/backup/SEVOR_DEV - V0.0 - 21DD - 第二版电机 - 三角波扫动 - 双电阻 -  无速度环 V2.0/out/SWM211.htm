<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\out\SWM211.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\out\SWM211.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Mar 08 20:08:18 2023
<BR><P>
<H3>Maximum Stack Usage =        260 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
PWM0_Handler &rArr; MC_Control &rArr; RIPD_GetRisingCurrentFunct &rArr; IPD_SlopCount &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[6]">UART0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UART0_Handler</a><BR>
 <LI><a href="#[8]">CORDIC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">CORDIC_Handler</a><BR>
 <LI><a href="#[9]">UART1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UART1_Handler</a><BR>
 <LI><a href="#[a]">PWM1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">PWM1_Handler</a><BR>
 <LI><a href="#[c]">HALL_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">HALL_Handler</a><BR>
 <LI><a href="#[e]">BOD_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">BOD_Handler</a><BR>
 <LI><a href="#[f]">PWMBRK_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">PWMBRK_Handler</a><BR>
 <LI><a href="#[10]">WDT_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">WDT_Handler</a><BR>
 <LI><a href="#[11]">I2C0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">I2C0_Handler</a><BR>
 <LI><a href="#[12]">XTALSTOP_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">XTALSTOP_Handler</a><BR>
 <LI><a href="#[15]">BTIMR0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">BTIMR0_Handler</a><BR>
 <LI><a href="#[16]">BTIMR1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">BTIMR1_Handler</a><BR>
 <LI><a href="#[17]">BTIMR2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">BTIMR2_Handler</a><BR>
 <LI><a href="#[18]">BTIMR3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">BTIMR3_Handler</a><BR>
 <LI><a href="#[19]">GPIOA_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">GPIOA_Handler</a><BR>
 <LI><a href="#[1a]">GPIOB_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">GPIOB_Handler</a><BR>
 <LI><a href="#[1b]">GPIOM_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">GPIOM_Handler</a><BR>
 <LI><a href="#[1c]">GPIOA0_GPIOM0_SPI1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">GPIOA0_GPIOM0_SPI1_Handler</a><BR>
 <LI><a href="#[1d]">GPIOA1_GPIOM1_MPU_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">GPIOA1_GPIOM1_MPU_Handler</a><BR>
 <LI><a href="#[1e]">GPIOA2_GPIOM2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">GPIOA2_GPIOM2_Handler</a><BR>
 <LI><a href="#[1f]">GPIOA3_GPIOM3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">GPIOA3_GPIOM3_Handler</a><BR>
 <LI><a href="#[20]">GPIOB0_GPIOA8_TIMR2_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">GPIOB0_GPIOA8_TIMR2_Handler</a><BR>
 <LI><a href="#[21]">GPIOB1_GPIOA9_DMA_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">GPIOB1_GPIOA9_DMA_Handler</a><BR>
 <LI><a href="#[22]">GPIOB2_GPIOA10_CAN0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">GPIOB2_GPIOA10_CAN0_Handler</a><BR>
 <LI><a href="#[23]">GPIOB3_GPIOA11_SPI0_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">GPIOB3_GPIOA11_SPI0_Handler</a><BR>
 <LI><a href="#[24]">GPIOB4_GPIOB10_QEI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">GPIOB4_GPIOB10_QEI_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[14]">ACMP_Handler</a> from interrupt.o(i.ACMP_Handler) referenced from startup_swm211.o(RESET)
 <LI><a href="#[13]">ADC0_Handler</a> from interrupt.o(i.ADC0_Handler) referenced from startup_swm211.o(RESET)
 <LI><a href="#[e]">BOD_Handler</a> from startup_swm211.o(RESET) referenced from startup_swm211.o(RESET)
 <LI><a href="#[15]">BTIMR0_Handler</a> from startup_swm211.o(RESET) referenced from startup_swm211.o(RESET)
 <LI><a href="#[16]">BTIMR1_Handler</a> from startup_swm211.o(RESET) referenced from startup_swm211.o(RESET)
 <LI><a href="#[17]">BTIMR2_Handler</a> from startup_swm211.o(RESET) referenced from startup_swm211.o(RESET)
 <LI><a href="#[18]">BTIMR3_Handler</a> from startup_swm211.o(RESET) referenced from startup_swm211.o(RESET)
 <LI><a href="#[8]">CORDIC_Handler</a> from startup_swm211.o(RESET) referenced from startup_swm211.o(RESET)
 <LI><a href="#[1c]">GPIOA0_GPIOM0_SPI1_Handler</a> from startup_swm211.o(RESET) referenced from startup_swm211.o(RESET)
 <LI><a href="#[1d]">GPIOA1_GPIOM1_MPU_Handler</a> from startup_swm211.o(RESET) referenced from startup_swm211.o(RESET)
 <LI><a href="#[1e]">GPIOA2_GPIOM2_Handler</a> from startup_swm211.o(RESET) referenced from startup_swm211.o(RESET)
 <LI><a href="#[1f]">GPIOA3_GPIOM3_Handler</a> from startup_swm211.o(RESET) referenced from startup_swm211.o(RESET)
 <LI><a href="#[19]">GPIOA_Handler</a> from startup_swm211.o(RESET) referenced from startup_swm211.o(RESET)
 <LI><a href="#[20]">GPIOB0_GPIOA8_TIMR2_Handler</a> from startup_swm211.o(RESET) referenced from startup_swm211.o(RESET)
 <LI><a href="#[21]">GPIOB1_GPIOA9_DMA_Handler</a> from startup_swm211.o(RESET) referenced from startup_swm211.o(RESET)
 <LI><a href="#[22]">GPIOB2_GPIOA10_CAN0_Handler</a> from startup_swm211.o(RESET) referenced from startup_swm211.o(RESET)
 <LI><a href="#[23]">GPIOB3_GPIOA11_SPI0_Handler</a> from startup_swm211.o(RESET) referenced from startup_swm211.o(RESET)
 <LI><a href="#[24]">GPIOB4_GPIOB10_QEI_Handler</a> from startup_swm211.o(RESET) referenced from startup_swm211.o(RESET)
 <LI><a href="#[1a]">GPIOB_Handler</a> from startup_swm211.o(RESET) referenced from startup_swm211.o(RESET)
 <LI><a href="#[1b]">GPIOM_Handler</a> from startup_swm211.o(RESET) referenced from startup_swm211.o(RESET)
 <LI><a href="#[c]">HALL_Handler</a> from startup_swm211.o(RESET) referenced from startup_swm211.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_swm211.o(RESET) referenced from startup_swm211.o(RESET)
 <LI><a href="#[11]">I2C0_Handler</a> from startup_swm211.o(RESET) referenced from startup_swm211.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_swm211.o(RESET) referenced from startup_swm211.o(RESET)
 <LI><a href="#[d]">PWM0_Handler</a> from interrupt.o(PlaceInRAM) referenced from startup_swm211.o(RESET)
 <LI><a href="#[a]">PWM1_Handler</a> from startup_swm211.o(RESET) referenced from startup_swm211.o(RESET)
 <LI><a href="#[f]">PWMBRK_Handler</a> from startup_swm211.o(RESET) referenced from startup_swm211.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_swm211.o(RESET) referenced from startup_swm211.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_swm211.o(RESET) referenced from startup_swm211.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_swm211.o(RESET) referenced from startup_swm211.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from interrupt.o(i.SysTick_Handler) referenced from startup_swm211.o(RESET)
 <LI><a href="#[7]">TIMR0_Handler</a> from interrupt.o(i.TIMR0_Handler) referenced from startup_swm211.o(RESET)
 <LI><a href="#[b]">TIMR1_Handler</a> from interrupt.o(i.TIMR1_Handler) referenced from startup_swm211.o(RESET)
 <LI><a href="#[6]">UART0_Handler</a> from startup_swm211.o(RESET) referenced from startup_swm211.o(RESET)
 <LI><a href="#[9]">UART1_Handler</a> from startup_swm211.o(RESET) referenced from startup_swm211.o(RESET)
 <LI><a href="#[10]">WDT_Handler</a> from startup_swm211.o(RESET) referenced from startup_swm211.o(RESET)
 <LI><a href="#[12]">XTALSTOP_Handler</a> from startup_swm211.o(RESET) referenced from startup_swm211.o(RESET)
 <LI><a href="#[25]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_swm211.o(RESET)
 <LI><a href="#[26]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_swm211.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>__Vectors_End</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_swm211.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm211.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm211.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm211.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm211.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UART0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm211.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>CORDIC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm211.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORDIC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORDIC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UART1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm211.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PWM1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm211.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>HALL_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm211.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HALL_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>BOD_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm211.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PWMBRK_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm211.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMBRK_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMBRK_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>WDT_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm211.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>I2C0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm211.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>XTALSTOP_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm211.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTALSTOP_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTALSTOP_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>BTIMR0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm211.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>BTIMR1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm211.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>BTIMR2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm211.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>BTIMR3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm211.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTIMR3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>GPIOA_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm211.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>GPIOB_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm211.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>GPIOM_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm211.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOM_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>GPIOA0_GPIOM0_SPI1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm211.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA0_GPIOM0_SPI1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA0_GPIOM0_SPI1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>GPIOA1_GPIOM1_MPU_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm211.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA1_GPIOM1_MPU_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA1_GPIOM1_MPU_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>GPIOA2_GPIOM2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm211.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA2_GPIOM2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA2_GPIOM2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>GPIOA3_GPIOM3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm211.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA3_GPIOM3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOA3_GPIOM3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>GPIOB0_GPIOA8_TIMR2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm211.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB0_GPIOA8_TIMR2_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB0_GPIOA8_TIMR2_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>GPIOB1_GPIOA9_DMA_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm211.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB1_GPIOA9_DMA_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB1_GPIOA9_DMA_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>GPIOB2_GPIOA10_CAN0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm211.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB2_GPIOA10_CAN0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB2_GPIOA10_CAN0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>GPIOB3_GPIOA11_SPI0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm211.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB3_GPIOA11_SPI0_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB3_GPIOA11_SPI0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>GPIOB4_GPIOB10_QEI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm211.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB4_GPIOB10_QEI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOB4_GPIOB10_QEI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[28]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a4]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[a5]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[a6]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[a7]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[a8]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[a9]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_Handler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TailWindSpeedDetect
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPD_SlopCount
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_svpwmtrfm
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentOffset
</UL>

<P><STRONG><a name="[2d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorcontrolInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VariablesPreInit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Init
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorcontrolInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VariablesPreInit
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[2f]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[34]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_FGOutput
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedMode_Control
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF_Func
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_FGOutput
</UL>

<P><STRONG><a name="[37]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedMode_Control
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF_Func
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_FGOutput
</UL>

<P><STRONG><a name="[78]"></a>__ARM_scalbn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF_Func
</UL>

<P><STRONG><a name="[ae]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF_Func
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_FGOutput
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedMode_Control
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF_Func
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedMode_Control
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF_Func
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_FGOutput
</UL>

<P><STRONG><a name="[30]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[af]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[b0]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b1]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[32]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[29]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[b3]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[d]"></a>PWM0_Handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, interrupt.o(PlaceInRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = PWM0_Handler &rArr; MC_Control &rArr; RIPD_GetRisingCurrentFunct &rArr; IPD_SlopCount &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_IntClr
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Control
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CurrentABC
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Overcurrent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>Get_CurrentABC</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mtcontrolfunction.o(PlaceInRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Get_CurrentABC &rArr; SingleR_Get_PhaseCurrent
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleR_Get_PhaseCurrent
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_Handler
</UL>

<P><STRONG><a name="[4d]"></a>mc_phasevoltcalc</STRONG> (Thumb, 164 bytes, Stack size 12 bytes, foclib.o(PlaceInRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mc_phasevoltcalc
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Align
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Algorithm
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcTailWind_Handle
</UL>

<P><STRONG><a name="[44]"></a>mc_svpwmtrfm</STRONG> (Thumb, 654 bytes, Stack size 40 bytes, foclib.o(PlaceInRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mc_svpwmtrfm &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_CmpTrigger
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Align
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Algorithm
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcTailWind_Handle
</UL>

<P><STRONG><a name="[4c]"></a>InvPark_Cale</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, foclib.o(PlaceInRAM))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Align
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Algorithm
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcTailWind_Handle
</UL>

<P><STRONG><a name="[46]"></a>CurrentLoop</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, foclib.o(PlaceInRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CurrentLoop &rArr; mcPI_CurrentLoop
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcPI_CurrentLoop
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Align
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Algorithm
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcTailWind_Handle
</UL>

<P><STRONG><a name="[4b]"></a>Park_Cale</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, foclib.o(PlaceInRAM))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Align
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Algorithm
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcTailWind_Handle
</UL>

<P><STRONG><a name="[49]"></a>Clake_Cale</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, foclib.o(PlaceInRAM))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Align
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Algorithm
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcTailWind_Handle
</UL>

<P><STRONG><a name="[48]"></a>FOC_Algorithm</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, foclib.o(PlaceInRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = FOC_Algorithm &rArr; mc_svpwmtrfm &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_svpwmtrfm
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_phasevoltcalc
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sin_Cos_Cale
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMO_Observer
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Park_Cale
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvPark_Cale
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentLoop
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clake_Cale
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Control
</UL>

<P><STRONG><a name="[4f]"></a>mcTailWind_Handle</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, foclib.o(PlaceInRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mcTailWind_Handle &rArr; mc_svpwmtrfm &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_svpwmtrfm
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_phasevoltcalc
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sin_Cos_Cale
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMO_Observer
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Park_Cale
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvPark_Cale
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentLoop
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clake_Cale
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_TailWind
</UL>

<P><STRONG><a name="[b4]"></a>RevPark_Circle_Limit</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, foclib.o(PlaceInRAM), UNUSED)

<P><STRONG><a name="[4e]"></a>SMO_Observer</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, observers.o(PlaceInRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SMO_Observer &rArr; mc_bemfobserv_PLL &rArr; __ARM_common_ll_mulss
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_bemfobserv_PLL
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Align
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Algorithm
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcTailWind_Handle
</UL>

<P><STRONG><a name="[14]"></a>ACMP_Handler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, interrupt.o(i.ACMP_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>ADC0_Handler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, interrupt.o(i.ADC0_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC0_Handler &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleR_ADCInject_Deal
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>ADC_Close</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, swm2x1_adc.o(i.ADC_Close))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[52]"></a>ADC_Init</STRONG> (Thumb, 556 bytes, Stack size 20 bytes, swm2x1_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC
</UL>

<P><STRONG><a name="[72]"></a>ADC_Open</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, swm2x1_adc.o(i.ADC_Open))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC
</UL>

<P><STRONG><a name="[8d]"></a>ADC_Start</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, swm2x1_adc.o(i.ADC_Start))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleR_ADCInject_Deal
</UL>

<P><STRONG><a name="[55]"></a>Abs_F15</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, observers.o(i.Abs_F15))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Align
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base_1ms_TIM
</UL>

<P><STRONG><a name="[54]"></a>Base_1ms_TIM</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, addfunction.o(i.Base_1ms_TIM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Base_1ms_TIM
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_F15
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[6c]"></a>CORDIC_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, swm2x1_cordic.o(i.CORDIC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
</UL>

<P><STRONG><a name="[56]"></a>Cancel_FGTimer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timer.o(i.Cancel_FGTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Cancel_FGTimer &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_Stop
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Control
</UL>

<P><STRONG><a name="[6b]"></a>DIV_Init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, swm2x1_div.o(i.DIV_Init))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
</UL>

<P><STRONG><a name="[59]"></a>FGOutput_Timer</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, timer.o(i.FGOutput_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FGOutput_Timer &rArr; TIMR_Init &rArr; TIMR_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_Start
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_OC_Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Control
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
</UL>

<P><STRONG><a name="[8c]"></a>FOCCloseLoopStart</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, tailwinddect.o(i.FOCCloseLoopStart))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMO_TailWindDealwith
</UL>

<P><STRONG><a name="[5d]"></a>FOCTailWindDealwith</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tailwinddect.o(i.FOCTailWindDealwith))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FOCTailWindDealwith &rArr; SMO_TailWindDealwith &rArr; PI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMO_TailWindDealwith
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_TailWind
</UL>

<P><STRONG><a name="[85]"></a>FOCTailWindTimeLimit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, tailwinddect.o(i.FOCTailWindTimeLimit))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_TailWind
</UL>

<P><STRONG><a name="[5f]"></a>FOC_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, mtcontrolfunction.o(i.FOC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FOC_Init &rArr; PI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_bemfobservinit_PLL
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TailWindDetectInit
</UL>

<P><STRONG><a name="[82]"></a>FaultProcess</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mtcontrolfunction.o(i.FaultProcess))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Control
</UL>

<P><STRONG><a name="[62]"></a>Fault_Detection</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, protect.o(i.Fault_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Fault_Detection &rArr; Fault_phaseloss
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_phaseloss
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Stall
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_OverUnderVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[64]"></a>Fault_OverUnderVoltage</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, protect.o(i.Fault_OverUnderVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Fault_OverUnderVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Detection
</UL>

<P><STRONG><a name="[41]"></a>Fault_Overcurrent</STRONG> (Thumb, 202 bytes, Stack size 4 bytes, protect.o(i.Fault_Overcurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Fault_Overcurrent
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_Handler
</UL>

<P><STRONG><a name="[65]"></a>Fault_Stall</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, protect.o(i.Fault_Stall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Fault_Stall
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Detection
</UL>

<P><STRONG><a name="[63]"></a>Fault_phaseloss</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, protect.o(i.Fault_phaseloss))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Fault_phaseloss
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Detection
</UL>

<P><STRONG><a name="[95]"></a>Flash_Param_at_xMHz</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, swm211_flash.o(i.Flash_Param_at_xMHz))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_Param_at_xMHz
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[66]"></a>GPIO_Init</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, swm2x1_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GPIO_Init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SixDrive_DisEnable
</UL>

<P><STRONG><a name="[8a]"></a>GPIO_InvBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, swm2x1_gpio.o(i.GPIO_InvBit))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIPD_GetRisingCurrentFunct
</UL>

<P><STRONG><a name="[67]"></a>GetCurrentOffset</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, mtcontrolfunction.o(i.GetCurrentOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GetCurrentOffset &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Ready
</UL>

<P><STRONG><a name="[68]"></a>HardwareInit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, main.o(i.HardwareInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HardwareInit &rArr; Init_PWM_Drive &rArr; PORT_SixDrive_Enable &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM_Drive
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_OPA
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_GPIO
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGOutput_Timer
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIV_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORDIC_Init
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>IN_Count</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, positioncheck.o(i.IN_Count))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIPD_GetRisingCurrentFunct
</UL>

<P><STRONG><a name="[70]"></a>IPD_SlopCount</STRONG> (Thumb, 806 bytes, Stack size 184 bytes, positioncheck.o(i.IPD_SlopCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = IPD_SlopCount &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIPD_Angle_Out
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIPD_GetRisingCurrentFunct
</UL>

<P><STRONG><a name="[6d]"></a>Init_ADC</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, adc.o(i.Init_ADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Init_ADC &rArr; ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Open
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Control
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
</UL>

<P><STRONG><a name="[6a]"></a>Init_GPIO</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio.o(i.Init_GPIO))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
</UL>

<P><STRONG><a name="[6f]"></a>Init_OPA</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, opa.o(i.Init_OPA))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Init_OPA &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
</UL>

<P><STRONG><a name="[69]"></a>Init_PWM_Drive</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, pwm_drive.o(i.Init_PWM_Drive))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Init_PWM_Drive &rArr; PORT_SixDrive_Enable &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Start
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_CmpTrigger
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SixDrive_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
</UL>

<P><STRONG><a name="[6e]"></a>Init_Timer</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(i.Init_Timer))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
</UL>

<P><STRONG><a name="[89]"></a>Inport_Plus_PWM</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, positioncheck.o(i.Inport_Plus_PWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Inport_Plus_PWM
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIPD_GetRisingCurrentFunct
</UL>

<P><STRONG><a name="[76]"></a>LPF_Func</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, addfunction.o(i.LPF_Func))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LPF_Func &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF_General
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[77]"></a>LPF_General</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, addfunction.o(i.LPF_General))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF_Func
</UL>

<P><STRONG><a name="[40]"></a>MC_Control</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, mtcontrol.o(i.MC_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = MC_Control &rArr; RIPD_GetRisingCurrentFunct &rArr; IPD_SlopCount &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIPD_GetRisingCurrentFunct
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SixDrive_DisEnable
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_TailWind
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Stop
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Ready
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Open
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Charge
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Align
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultProcess
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Algorithm
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cancel_FGTimer
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGOutput_Timer
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_Handler
</UL>

<P><STRONG><a name="[7e]"></a>Motor_Align</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, mtcontrolfunction.o(i.Motor_Align))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Motor_Align &rArr; mc_svpwmtrfm &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Abs_F15
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_svpwmtrfm
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_phasevoltcalc
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sin_Cos_Cale
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMO_Observer
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Park_Cale
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvPark_Cale
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentLoop
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clake_Cale
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Control
</UL>

<P><STRONG><a name="[7b]"></a>Motor_Charge</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, mtcontrolfunction.o(i.Motor_Charge))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Motor_Charge
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Control
</UL>

<P><STRONG><a name="[7a]"></a>Motor_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mtcontrolfunction.o(i.Motor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Motor_Init &rArr; PORT_SixDrive_Enable &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SixDrive_Enable
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VariablesPreInit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Control
</UL>

<P><STRONG><a name="[7f]"></a>Motor_Open</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mtcontrolfunction.o(i.Motor_Open))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Control
</UL>

<P><STRONG><a name="[79]"></a>Motor_Ready</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mtcontrolfunction.o(i.Motor_Ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Motor_Ready &rArr; GetCurrentOffset &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurrentOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Control
</UL>

<P><STRONG><a name="[80]"></a>Motor_Stop</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mtcontrolfunction.o(i.Motor_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Control
</UL>

<P><STRONG><a name="[7c]"></a>Motor_TailWind</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mtcontrolfunction.o(i.Motor_TailWind))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Motor_TailWind &rArr; mcTailWind_Handle &rArr; mc_svpwmtrfm &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcTailWind_Handle
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TailWindSpeedDetect
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TailWindDetectInit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOCTailWindTimeLimit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOCTailWindDealwith
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Control
</UL>

<P><STRONG><a name="[87]"></a>MotorcontrolInit</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, mtcontrolfunction.o(i.MotorcontrolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MotorcontrolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareInit
</UL>

<P><STRONG><a name="[60]"></a>PI_Init</STRONG> (Thumb, 120 bytes, Stack size 4 bytes, picontrol.o(i.PI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMO_TailWindDealwith
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Init
</UL>

<P><STRONG><a name="[a2]"></a>PLLInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, system_swm211.o(i.PLLInit))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchToPLL
</UL>

<P><STRONG><a name="[57]"></a>PORT_Init</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, swm2x1_port.o(i.PORT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cancel_FGTimer
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_OPA
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGOutput_Timer
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_SixDrive_Enable
</UL>

<P><STRONG><a name="[81]"></a>PORT_SixDrive_DisEnable</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, pwm_drive.o(i.PORT_SixDrive_DisEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = PORT_SixDrive_DisEnable &rArr; GPIO_Init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Control
</UL>

<P><STRONG><a name="[75]"></a>PORT_SixDrive_Enable</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, pwm_drive.o(i.PORT_SixDrive_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PORT_SixDrive_Enable &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM_Drive
</UL>

<P><STRONG><a name="[45]"></a>PWM_CmpTrigger</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, swm2x1_pwm.o(i.PWM_CmpTrigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_CmpTrigger
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM_Drive
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_svpwmtrfm
</UL>

<P><STRONG><a name="[73]"></a>PWM_Init</STRONG> (Thumb, 352 bytes, Stack size 4 bytes, swm2x1_pwm.o(i.PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PWM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM_Drive
</UL>

<P><STRONG><a name="[42]"></a>PWM_IntClr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, swm2x1_pwm.o(i.PWM_IntClr))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM0_Handler
</UL>

<P><STRONG><a name="[74]"></a>PWM_Start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, swm2x1_pwm.o(i.PWM_Start))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_PWM_Drive
</UL>

<P><STRONG><a name="[71]"></a>RIPD_Angle_Out</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, positioncheck.o(i.RIPD_Angle_Out))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPD_SlopCount
</UL>

<P><STRONG><a name="[7d]"></a>RIPD_GetRisingCurrentFunct</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, positioncheck.o(i.RIPD_GetRisingCurrentFunct))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = RIPD_GetRisingCurrentFunct &rArr; IPD_SlopCount &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InvBit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inport_Plus_PWM
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IPD_SlopCount
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_Count
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MC_Control
</UL>

<P><STRONG><a name="[5e]"></a>SMO_TailWindDealwith</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, tailwinddect.o(i.SMO_TailWindDealwith))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SMO_TailWindDealwith &rArr; PI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOCCloseLoopStart
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOCTailWindDealwith
</UL>

<P><STRONG><a name="[4a]"></a>Sin_Cos_Cale</STRONG> (Thumb, 128 bytes, Stack size 4 bytes, mytype.o(i.Sin_Cos_Cale))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Sin_Cos_Cale
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Align
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Algorithm
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcTailWind_Handle
</UL>

<P><STRONG><a name="[51]"></a>SingleR_ADCInject_Deal</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, adc.o(i.SingleR_ADCInject_Deal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SingleR_ADCInject_Deal
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_Handler
</UL>

<P><STRONG><a name="[43]"></a>SingleR_Get_PhaseCurrent</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, foclib.o(i.SingleR_Get_PhaseCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SingleR_Get_PhaseCurrent
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CurrentABC
</UL>

<P><STRONG><a name="[8e]"></a>SoftwareInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.SoftwareInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SoftwareInit &rArr; MotorcontrolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorcontrolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>SpeedMode_Control</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, speedmode.o(i.SpeedMode_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SpeedMode_Control &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[90]"></a>Speed_response</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, addfunction.o(i.Speed_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Speed_response &rArr; mc_ControllerPI
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_ControllerPI
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_ramp
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, interrupt.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SysTick_Handler &rArr; LPF_Func &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Detection
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedMode_Control
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_response
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF_Func
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Base_1ms_TIM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, system_swm211.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[94]"></a>SystemInit</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, system_swm211.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchToPLL
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Param_at_xMHz
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>TIMR0_Handler</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, interrupt.o(i.TIMR0_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMR0_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_IC_GetCaptureL
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_IC_GetCaptureH
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_IC_CaptureL_INTStat
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_IC_CaptureL_INTClr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_IC_CaptureH_INTStat
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_IC_CaptureH_INTClr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>TIMR1_Handler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, interrupt.o(i.TIMR1_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMR1_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_INTClr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_IC_GetCaptureL
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_IC_GetCaptureH
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_IC_CaptureL_INTStat
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_IC_CaptureL_INTClr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_IC_CaptureH_INTStat
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_IC_CaptureH_INTClr
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_GetCurValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm211.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>TIMR_GetCurValue</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, swm2x1_timr.o(i.TIMR_GetCurValue))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR1_Handler
</UL>

<P><STRONG><a name="[99]"></a>TIMR_IC_CaptureH_INTClr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, swm2x1_timr.o(i.TIMR_IC_CaptureH_INTClr))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR1_Handler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR0_Handler
</UL>

<P><STRONG><a name="[97]"></a>TIMR_IC_CaptureH_INTStat</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, swm2x1_timr.o(i.TIMR_IC_CaptureH_INTStat))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR1_Handler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR0_Handler
</UL>

<P><STRONG><a name="[9c]"></a>TIMR_IC_CaptureL_INTClr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, swm2x1_timr.o(i.TIMR_IC_CaptureL_INTClr))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR1_Handler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR0_Handler
</UL>

<P><STRONG><a name="[9a]"></a>TIMR_IC_CaptureL_INTStat</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, swm2x1_timr.o(i.TIMR_IC_CaptureL_INTStat))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR1_Handler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR0_Handler
</UL>

<P><STRONG><a name="[98]"></a>TIMR_IC_GetCaptureH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, swm2x1_timr.o(i.TIMR_IC_GetCaptureH))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR1_Handler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR0_Handler
</UL>

<P><STRONG><a name="[9b]"></a>TIMR_IC_GetCaptureL</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, swm2x1_timr.o(i.TIMR_IC_GetCaptureL))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR1_Handler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR0_Handler
</UL>

<P><STRONG><a name="[9e]"></a>TIMR_INTClr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, swm2x1_timr.o(i.TIMR_INTClr))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR1_Handler
</UL>

<P><STRONG><a name="[5a]"></a>TIMR_Init</STRONG> (Thumb, 272 bytes, Stack size 36 bytes, swm2x1_timr.o(i.TIMR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TIMR_Init &rArr; TIMR_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGOutput_Timer
</UL>

<P><STRONG><a name="[5b]"></a>TIMR_OC_Init</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, swm2x1_timr.o(i.TIMR_OC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGOutput_Timer
</UL>

<P><STRONG><a name="[5c]"></a>TIMR_Start</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, swm2x1_timr.o(i.TIMR_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIMR_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FGOutput_Timer
</UL>

<P><STRONG><a name="[58]"></a>TIMR_Stop</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, swm2x1_timr.o(i.TIMR_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMR_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cancel_FGTimer
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_Init
</UL>

<P><STRONG><a name="[84]"></a>TailWindDetectInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, tailwinddect.o(i.TailWindDetectInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TailWindDetectInit &rArr; FOC_Init &rArr; PI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_TailWind
</UL>

<P><STRONG><a name="[86]"></a>TailWindSpeedDetect</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, tailwinddect.o(i.TailWindSpeedDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TailWindSpeedDetect &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_TailWind
</UL>

<P><STRONG><a name="[9f]"></a>Timer_FGOutput</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, addfunction.o(i.Timer_FGOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Timer_FGOutput &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>VariablesPreInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, mtcontrolfunction.o(i.VariablesPreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VariablesPreInit
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
</UL>

<P><STRONG><a name="[3d]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[a0]"></a>__ARM_common_ll_mulss</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, observers.o(i.__ARM_common_ll_mulss))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_common_ll_mulss
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mc_bemfobserv_PLL
</UL>

<P><STRONG><a name="[b5]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[b6]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[b7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = main &rArr; Timer_FGOutput &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_FGOutput
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoftwareInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[47]"></a>mcPI_CurrentLoop</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, picontrol.o(i.mcPI_CurrentLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mcPI_CurrentLoop
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentLoop
</UL>

<P><STRONG><a name="[92]"></a>mc_ControllerPI</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, picontrol.o(i.mc_ControllerPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mc_ControllerPI
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_response
</UL>

<P><STRONG><a name="[50]"></a>mc_bemfobserv_PLL</STRONG> (Thumb, 716 bytes, Stack size 24 bytes, observers.o(i.mc_bemfobserv_PLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mc_bemfobserv_PLL &rArr; __ARM_common_ll_mulss
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_mulss
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMO_Observer
</UL>

<P><STRONG><a name="[61]"></a>mc_bemfobservinit_PLL</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, mtcontrolfunction.o(i.mc_bemfobservinit_PLL))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FOC_Init
</UL>

<P><STRONG><a name="[91]"></a>mc_ramp</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, addfunction.o(i.mc_ramp))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_response
</UL>

<P><STRONG><a name="[a1]"></a>switchTo12MHz</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system_swm211.o(i.switchTo12MHz))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchToPLL
</UL>

<P><STRONG><a name="[96]"></a>switchToPLL</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system_swm211.o(i.switchToPLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = switchToPLL
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchTo12MHz
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLLInit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<P>
<H3>
Local Symbols
</H3><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
